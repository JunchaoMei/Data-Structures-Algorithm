Problem: Sort n keys in nondecreasing order using a nonrecursive Mergesort algorithm.
Inputs: L, unsorted Sequential List.
Outputs: TR[], sorted array.

void mergeSortNonrecursive (SequentialList L)
{
	keytype[] TR; //TR.length = L.length
	index k=1;
	while (k < L.length)
	{	
		mergePass(L.r, TR, k, L.length);
		k = 2*k;
		mergePass(TR, L.r, k, L.length);
		k = 2*k;
	}//end while loop
}//end mergeSortNonrecursive

void mergePass (keytype[] SR, keytype[] TR, number s, number n)
{	//SR = L.r;
	index i=1;
	index j;

	while (i<= (n-2*s-1))
	{
		merge(SR, TR, i, i+s-1, i+2*s-1);
		i = i+2*s;
	}//end while loop

	if (i < (n-s+1))//merge last 2 sequence
		merge(SR, TR, i, i+s-1, n);
	else
	{
		for (j=1; j<=n; j++)
			TR[i] = SR[j];
	}//end if...else
}//end mergePass


void merge (keytype[] SR, keytype[] TR, index i, number m, number n)
{
	index j,k,l;

	for (j=m+1, k=i; i<=m && j<=n; k++)
	{
		if (SR[i] <= SR[j])
			TR[k] = SR[i++];
		else
			TR[k] = SR[j++];
	}//end for loop

	if (i<=m)
	{
		for (l=0; l<m-i; l++)
			TR[k+1] = SR[i+1];
	}//end if i

	if (j<=n)
	{
		for (l=0; l<=n-j; l++)
			TR[k+1] = SR[j+1];
	}//end if j
}//end merge